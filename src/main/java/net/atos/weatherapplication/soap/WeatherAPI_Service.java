
package net.atos.weatherapplication.soap;

import jakarta.xml.ws.*;

import javax.xml.namespace.QName;
import java.net.MalformedURLException;
import java.net.URL;


/**
 * This class was generated by the XML-WS Tools.
 * XML-WS Tools 4.0.0
 * Generated source version: 3.0
 * 
 */
@WebServiceClient(name = "WeatherAPI", targetNamespace = "http://www.example.org/WeatherAPI/", wsdlLocation = "file:/C:/Users/istra/IdeaProjects/OpenWeatherApp/src/main/resources/WeatherAPI.wsdl")
public class WeatherAPI_Service
    extends Service
{

    private final static URL WEATHERAPI_WSDL_LOCATION;
    private final static WebServiceException WEATHERAPI_EXCEPTION;
    private final static QName WEATHERAPI_QNAME = new QName("http://www.example.org/WeatherAPI/", "WeatherAPI");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("file:/C:/Users/istra/IdeaProjects/OpenWeatherApp/src/main/resources/WeatherAPI.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        WEATHERAPI_WSDL_LOCATION = url;
        WEATHERAPI_EXCEPTION = e;
    }

    public WeatherAPI_Service() {
        super(__getWsdlLocation(), WEATHERAPI_QNAME);
    }

    public WeatherAPI_Service(WebServiceFeature... features) {
        super(__getWsdlLocation(), WEATHERAPI_QNAME, features);
    }

    public WeatherAPI_Service(URL wsdlLocation) {
        super(wsdlLocation, WEATHERAPI_QNAME);
    }

    public WeatherAPI_Service(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, WEATHERAPI_QNAME, features);
    }

    public WeatherAPI_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WeatherAPI_Service(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns WeatherAPI
     */
    @WebEndpoint(name = "WeatherAPISoap")
    public WeatherAPI getWeatherAPISoap() {
        return super.getPort(new QName("http://www.example.org/WeatherAPI/", "WeatherAPISoap"), WeatherAPI.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherAPI
     */
    @WebEndpoint(name = "WeatherAPISoap")
    public WeatherAPI getWeatherAPISoap(WebServiceFeature... features) {
        return super.getPort(new QName("http://www.example.org/WeatherAPI/", "WeatherAPISoap"), WeatherAPI.class, features);
    }

    private static URL __getWsdlLocation() {
        if (WEATHERAPI_EXCEPTION!= null) {
            throw WEATHERAPI_EXCEPTION;
        }
        return WEATHERAPI_WSDL_LOCATION;
    }

}
